### Compiling all the RLE results and determining status for each vegetation type

```{r}
library(tidyverse)

# import data for Criterion D and A from various sources
alt_sum <- read.csv("C:/Rdata/LCC_terr/outputs/alt_sum.csv")
step_sum <- read.csv("C:/Rdata/LCC_terr/outputs/step_sum.csv")
lk_sum <- read.csv("C:/Rdata/LCC_terr/outputs/lk_sum.csv")
coct_sum <- read.csv("C:/Rdata/LCC_terr/outputs/coct_sum.csv")
nmb_sum <- read.csv("C:/Rdata/LCC_terr/outputs/nmb_sum.csv")
 
# data from land cover chnage stats from NLC 7 class
results_A2b_B_ROD <- read.csv("C:/Rdata/RLE_terr/outputs/results_A2b_B_ROD.csv")
results_A3nat <- read.csv("C:/Rdata/RLE_terr/outputs/results_A3.csv")

# data from meta nalysis of species threats per ecosystem type
results_B_TH_SP <- read.csv("C:/Rdata/RLE_terr/outputs/results_B_TH_SP.csv")

# data from invasive layers (created in Invasive_percentagres_all.qmd)
inv_comb <- read.csv("C:/Rdata/INV_terr/outputs/data_for_rle_inv_comb.csv")

# summed max stacked raster  invasive coverage - over estimate of IAP cover
#inv_max <- read.csv("C:/Rdata/INV_terr/outputs/data_for_rle_inv_max2.csv")

# note that two additionalcondition datasets were analysed but they showed very low leves of degradation - and were ommitted from this compilation; 
# Hardeveld degradation study (Bell et al. 2021) https://github.com/askowno/LLC_terr/blob/main/Hardeveld_Condition.qmd &  
# Little Karoo degradation study (Kirsten et al. 2023) https://github.com/askowno/LLC_terr/blob/main/LittleKaroo_Kirsten_Condition.qmd
```

### Criterion A

Compile Criterion A and include extent within AOI so that the source of the supplementary assessment can be identified

```{r}
options(scipen =999)

# Prepare for choosing highest threat category by ranking CR EN VUL LC
rank_levels <- c("LC", "VU", "EN", "CR")

# Join summary tables from each supplementary assessment
RLE_A3_compiled <- results_A3nat %>%
  left_join(alt_sum, by = "T_MAPCODE") %>%
    left_join(nmb_sum, by = "T_MAPCODE") %>%
    left_join(coct_sum, by = "T_MAPCODE") %>%
    select(T_MAPCODE, prclost_2022, prclost_alt, prclost_nmb, prclost_coct,  A3_2022, A3_alt, A3_nmb,  A3_coct, ext_wc, ext_kzn, ext_mpl, ext_nmb, ext_coct) %>%
  mutate(across(A3_2022:A3_coct, ~factor(.x, levels = rank_levels, ordered = TRUE))) %>%
  mutate(A3_2022 = as.numeric(A3_2022)) %>%
  mutate(A3_alt = as.numeric(A3_alt)) %>%
  mutate(A3_nmb = as.numeric(A3_nmb)) %>%
  mutate(A3_coct = as.numeric(A3_coct)) 
 

# Convert A3_* columns to ordered factors
RLE_A3_compiled <- RLE_A3_compiled %>%
  rowwise() %>%
  mutate(
    # Calculate A3_fin as the maximum rank across columns (ordered factors are automatically ranked)
    A3_fin = max(c_across(A3_2022:A3_coct), na.rm = TRUE)
  ) %>%
  mutate(
    source = case_when(A3_fin == A3_2022 & 
                            ext_wc < 0.95 & ext_mpl< 0.95 &  
                            ext_kzn < 0.95 & ext_nmb < 0.95 & ext_coct < 0.95 ~ "A3_nat",
                          A3_2022 == A3_coct & ext_coct > 0.95 ~ "A3_nat, A3_coct",
                          A3_2022 == A3_alt & ext_wc > 0.95 ~ "A3_nat, A3_wc",
                          A3_2022 == A3_alt & ext_kzn > 0.95 ~ "A3_nat, A3_kzn",
                          A3_2022 == A3_alt & ext_mpl > 0.95 ~ "A3_nat, A3_mpl",
                          A3_2022  == A3_nmb & ext_nmb > 0.95 ~ "A3_nat, A3_nmb",
                          A3_alt > A3_2022 & ext_wc >0.95 ~ "A3_wc",
                          A3_alt > A3_2022 & ext_kzn >0.95 ~ "A3_kzn",
                          A3_alt > A3_2022 & ext_mpl >0.95 ~ "A3_mpl",
                          A3_nmb > A3_2022 ~ "A3_nmb", 
                          A3_coct > A3_2022 ~ "A3_coct", 
                          TRUE ~ "A3_nat")) %>%
  mutate(across(starts_with("A3"), ~ factor(recode(., `1` = "LC", `2` = "VU", `3` = "EN", `4` = "CR"), levels = rank_levels, ordered = TRUE))) %>%
  rename(A3_source = source) %>%
   mutate(A3_prclost = case_when(A3_source == "A3_nat" ~ prclost_2022,
                                A3_source == "A3_wc" | A3_source == "A3_kzn" | A3_source == "A3_mpl"  ~ prclost_alt, 
                                A3_source =="A3_nat, A3_kzn"  ~ prclost_alt, 
                                A3_source =="A3_nat, A3_wc"   ~ prclost_alt, 
                                A3_source =="A3_nat, A3_mpl"  ~ prclost_alt,  
                                A3_source =="A3_nmb"  ~ prclost_nmb, 
                                A3_source =="A3_nat, A3_nmb"  ~ prclost_nmb, 
                                A3_source =="A3_coct"  ~ prclost_coct, 
                                A3_source =="A3_nat, A3_coct"  ~ prclost_coct,
                                TRUE ~ 0)) %>%
  mutate(A3_prclost = pmax(A3_prclost, 0)) 

 
# Add A2b general model 1990- 2022 decline
results_A2b <- results_A2b_B_ROD %>%
  select(prclost50_9022, A2b_9022, T_MAPCODE) %>%
  mutate(A2b_source =  "A2b") %>%
  rename(A2b_fin = A2b_9022)

# Join A3 and A2 results compilations
RLE_A2bA3_compiled <- RLE_A3_compiled %>%
  left_join(results_A2b, by =  "T_MAPCODE") %>%
  select(T_MAPCODE, A3_fin, A3_source, A3_prclost, A2b_fin, A2b_source, prclost50_9022) %>%
  rename(A2b_prclost50 = prclost50_9022)
 
# write results
write.csv(RLE_A2bA3_compiled, file = "outputs/RLE_A2bA3_compiled.csv")              
   
```

### Criterion D

Compile Criterion D and include extent so that the source of the assessment can be identified

```{r}

# Prepare for choosing highest threat category by ranking CR EN VUL LC
rank_levels <- c("LC", "VU", "EN", "CR")

# Join summary tables from each supplementary assessment
RLE_D <- coct_sum %>%
    left_join(nmb_sum, by = "T_MAPCODE") %>%
    left_join(lk_sum, by = "T_MAPCODE") %>%
    left_join(step_sum, by = "T_MAPCODE") %>%
  select(T_MAPCODE, D3_coct, D3_nmb, D3_lk, D3_step, ext_coct, ext_nmb, ext_lk, ext_step, prcdeg_coct, prcdeg_nmb, prcdeg_lk, prcdeg_step) %>%
 # only one type is threatened and it is in the STEP data - so can shortcut working out max value 
  mutate(D3_fin = D3_step) %>%
  mutate(D3_source = case_when(ext_coct > 0.95 ~ "D3_coct", 
                               ext_nmb > 0.95 ~ "D3_nmb", 
                               ext_lk > 0.95 ~ "D3_lk", 
                               ext_step > 0.95 ~ "D3_step", 
                               TRUE ~ "")) %>%
  mutate(D3_prcdeg = case_when(D3_source == "D3_coct"  ~ prcdeg_coct, 
                                D3_source =="D3_nmb"  ~ prcdeg_nmb,  
                                D3_source =="D3_lk"  ~ prcdeg_lk,  
                                D3_source =="D3_step"  ~ prcdeg_step,   
                                TRUE ~ 0)) %>%
  select(T_MAPCODE, D3_fin, D3_source, D3_prcdeg) 
  
  # Add invasives data and select columns
  inv_D <- inv_comb %>%
    select(T_MAPCODE, prpinv_max, D3_inv) %>%
     mutate(D3_inv = case_when(D3_inv == 4 ~ "CR", 
                               D3_inv == 3 ~ "EN", 
                               D3_inv == 2 ~ "VU", 
                               D3_inv == 1 ~ "LC", 
                               TRUE ~ "check"))
    
  RLE_D_compiled <- RLE_D %>%
     left_join(inv_D, by = "T_MAPCODE") %>%
    # add inv to D3 source
    mutate(D3_source = if_else(
    !is.na(prpinv_max),                         # only if prpinv_max is not NA
    paste(D3_source, "D3_inv", sep = "; "),     # append D3_inv to existing text
    D3_source                                   # otherwise keep as is
  ))%>%
  mutate(D3_source = str_remove(D3_source, "^;\\s*"))
   # note no types are threatened due to D3 so no chnages to D3_fin are required but if this chaages extra code will have to ensure that the highest threat status is captured in D3_fin 
 
  

# write results
write.csv(RLE_D_compiled, file = "outputs/RLE_D_compiled.csv")   
  
```

Criterion B compiled

```{r}
# Add B ROD from general model 1990- 2022 decline
# prep invasives B results 
inv_B <- inv_comb %>%
    select(T_MAPCODE, prpinv_max, B1i_inv, B2i_inv) %>%
     mutate(across(starts_with("B") , ~ case_when(.x == 4 ~ "CR", 
                               .x == 3 ~ "EN", 
                               .x == 2 ~ "VU", 
                               .x == 1 ~ "LC", 
                               TRUE ~ "check")))
# combine all B results 
  RLE_B_compiled <- results_A2b_B_ROD %>%
  select(T_MAPCODE, ROD9022_rounded, B1i_rod, B2i_rod) %>%
  #add invasive data derived assessment of ongoing decline
  left_join(inv_B, by = "T_MAPCODE") %>%
     mutate(B1i_inv = if_else(is.na(B1i_inv), "LC", B1i_inv)) %>%
     mutate(B2i_inv = if_else(is.na(B2i_inv), "LC", B2i_inv)) %>%
       #add threatened species based assessment of ongoing decline
  left_join(results_B_TH_SP, by = "T_MAPCODE") %>%
  # clean up columns
  select(T_MAPCODE, ROD9022_rounded, B1i_rod, B2i_rod, B1i_inv, B2i_inv, B1iii_sp, B2iii_sp) %>%
  rename(RoD = ROD9022_rounded) %>%
      # prepare to calc max from char col storing RLE status (CR EN VU LC)
     mutate(across(B1i_rod:B2iii_sp, ~factor(.x, levels = rank_levels, ordered = TRUE))) %>%
      mutate(across(B1i_rod:B2iii_sp, ~ as.numeric(.x))) %>%
       mutate(xB1_fin = pmax(B1i_rod, B1i_inv, B1iii_sp, na.rm = TRUE)) %>%
        mutate(xB2_fin = pmax(B2i_rod, B2i_inv, B2iii_sp, na.rm = TRUE))
    
  
# add source column       

library(stringr)

RLE_B_compiled <- RLE_B_compiled %>%
  rowwise() %>%  # Ensure operations are done row-wise
  mutate(B1_source = {
    matching_cols <- names(select(RLE_B_compiled, starts_with("B1")))[c_across(starts_with("B1")) == xB1_fin]
    if (length(matching_cols) > 0) {
      paste(matching_cols, collapse = ", ")
    } else {
      NA_character_
    }
  }) %>%
   mutate(B2_source = {
    matching_cols <- names(select(RLE_B_compiled, starts_with("B2")))[c_across(starts_with("B2")) == xB2_fin]
    if (length(matching_cols) > 0) {
      paste(matching_cols, collapse = ", ")
    } else {
      NA_character_
    }
  }) %>%
  ungroup() %>% # Ungroup to return to a normal dataframe  
  rename(B1_fin = xB1_fin, B2_fin = xB2_fin) %>%
  mutate(across(
    c(B1i_rod, B2i_rod, B1i_inv, B2i_inv, B1iii_sp, B2iii_sp, B1_fin, B2_fin),
    ~ recode(.x,
             `1` = "LC",
             `2` = "VU",
             `3` = "EN",
             `4` = "CR")
  ))

# write results
write.csv(RLE_B_compiled, file = "outputs/RLE_B_compiled.csv") 

```

```{r}
# final full compilations and results of RLE

RLE_full_compiled <- RLE_A2bA3_compiled %>%
  left_join(RLE_B_compiled, by = "T_MAPCODE") %>%
  left_join(RLE_D_compiled, by = "T_MAPCODE") %>%
    #convert RLE cat to values to get max 
 mutate(across(
    c(A3_fin, A2b_fin, B1_fin, B2_fin, D3_fin),
    ~ recode(.x,
             "LC" = 1,
             "VU" = 2,
             "EN" = 3,
             "CR" = 4)
  )) %>%
       mutate(RLE = pmax(A3_fin, A2b_fin, B1_fin, B2_fin, D3_fin, na.rm = TRUE)) %>%
   # clean up cols
  # alternative way to add trigger column
  mutate(t1 = ifelse(RLE >1 & A3_fin == RLE, A3_source, ""),
         t2 =  ifelse(RLE >1 & A2b_fin == RLE, A2b_source, ""),
         t3 =  ifelse(RLE >1 & B1_fin == RLE, B1_source, ""),
         t4 =  ifelse(RLE >1 & B2_fin == RLE, B2_source, ""),
         t5 =  ifelse(RLE >1 & D3_fin == RLE, D3_source, "")) %>%
  mutate(Criteria_triggered = paste(na.omit(c(t1, t2, t3, t4, t5))[nzchar(na.omit(c(t1, t2, t3, t4, t5)))], collapse = ", ")) %>%
     mutate(Criteria_used = str_c(A3_source, A2b_source, B1_source, B2_source, D3_source, sep = ", ")) %>%
    select(T_MAPCODE, A3_fin, A3_prclost, A2b_fin, A2b_prclost50, B1_fin, B2_fin, RoD, D3_fin, D3_prcdeg, prpinv_max, RLE, Criteria_triggered, Criteria_used) %>%
  mutate(across(
    c(A3_fin, A2b_fin, B1_fin, B2_fin, D3_fin, RLE),
    ~ recode(.x,
            `1`= "LC" ,
             `2` = "VU" ,
             `3`= "EN" ,
             `4`= "CR" )
  )) %>%
  mutate(RLE = factor(RLE, levels = rank_levels, ordered = TRUE))
  
  write.csv(RLE_full_compiled, file = "outputs/RLE_full_compiled.csv") 

```

#### Expert adjustments based on supplementary data and other considerations

-   Remove types outside of SA = Gd9

-   Remove types assessed in other realms = FOa2 (Swamp Forest)

-   Remove types assessed in other relams and with global RLE assessments = Mangroves (FOa3) Endangered - assessed as part of GLobal Mangrove RLE (Agulhus Mangroves, EN, 2024)

-   SKV11 needs adjustment up to EN to match 2022 Supplementary assessment (Vlok & Vlok., 2020 - (D1_sup) degradation from overgrazing ongoing and recent) which is still valid.

Three Richtersveld types adjusted based on Jurgens et al., 2025; this data includes 50 years of longterm intensive field plot based data (high confidence).

-    SKr7 mean condition \>50% severity 12 plots & EOO \<20000km2 : Status EN (B1i_sup)

-    SKr2 mean condition \>90% severity 15 plots & EOO \<2000km2 : Status CR (B1i_sup)

-    SKr13 mean condition \>90% severity 6 plots & EOO \<2000km2 : CR (B1i_sup)

Corrections: FFh5 needs adjustment up to CR to match 2022 (right on eoo threshold of 2000km2); FOa1 needs adjustment up to VU to match 2022 (right on rod threshold): FS4 needs adjustment up to CR to match 2022 (right on TSp/km2 threshold); Gh14 needs adjustment up to EN to match 2022 (right on rod threshold); Gm16 needs adjustment up to EN to match 2022 (right on rod threshold); Gm22 needs adjustment up to EN to match 2022 (right on rod threshold); Gs12 needs adjustment up to EN to match 2022 (right on rod threshold)

```{r}

# Expert Adjustments of Compiled RLE list  

# Make adjustment table based on the above  
RLE_adjustments <- data.frame(
  T_MAPCODE = c("FFh5", "FOa1", "FS4", "Gh14", "Gm16", "Gm22", "Gs12", "SKv11", "SKr7", "SKr2", "SKr13"),
  RLE_adjusted = c( "CR", "VU", "CR", "EN", "EN", "EN", "EN", "EN", "EN", "CR", "CR"),
  Criteria_triggered_adjusted = c("B1i_rod, B2i_rod, B1iii_sp, B2iii_sp",
                                  "B2i_rod", "B1iii_sp", "B1i_rod", "B1i_rod",                                        "B1i_rod", "B1i_rod","D1_elk", "B1i_sup", "B1i_sup", "B1i_sup"),
    stringsAsFactors = FALSE)  # optional, avoids automatic factor conversion

# Join to compilation table 
RLE_full_compiled_adjusted <- RLE_full_compiled %>%
  left_join(RLE_adjustments, by = "T_MAPCODE") %>%
  mutate(RLE = if_else(!is.na(RLE_adjusted), RLE_adjusted, RLE)) %>%
  mutate(Criteria_triggered = ifelse(!is.na(RLE_adjusted), Criteria_triggered_adjusted, Criteria_triggered)) %>%
  mutate(expert_change = ifelse(is.na(RLE_adjusted), "RLE not adjusted", "RLE adjusted" )) %>%
  select(-RLE_adjusted, -Criteria_triggered_adjusted) %>%
 filter(!T_MAPCODE %in% c("FOa2", "FOa3", "Gd9"))
   
 
  # write results
write.csv(RLE_full_compiled_adjusted, file = "outputs/RLE_full_compiled_adjusted.csv")
```

**Produce plots for RLE results**

```{r}
library(sf)
# Add veg map and table to access Biomes and Names 
veg <-st_read("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_change.gdb", "NVM2024Final_IEM5_12_07012025") %>% #ensure it uses proj =  wgs84 aea cm 25 -24 -33
st_drop_geometry() %>%
  distinct(T_MAPCODE, T_Name,  T_BIOME,T_BIOREGION) %>%
  filter(!is.na(T_MAPCODE), T_MAPCODE != "<Null>", T_MAPCODE != "")


# make summary counts of RLE categories per biome
 rle_sum <- RLE_full_compiled_adjusted %>%
    left_join(veg, by = "T_MAPCODE") %>%
     filter(T_MAPCODE != "Gd9") %>%   
   group_by(RLE, T_BIOME) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = RLE, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
    # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., T_BIOME = "Total", across(where(is.numeric), sum))) %>%
  # Add RLEI
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
  mutate(T_BIOME = factor(T_BIOME, levels = c("Total", "Succulent Karoo", "Savanna", "Nama-Karoo" , "Indian Ocean Coastal Belt", "Grassland", "Fynbos", "Forests","Desert", "Azonal Vegetation", "Albany Thicket" ))) %>% ## ggplot plots inverted factors!
   arrange(T_BIOME)
 
 # export a csv of results - COUNT of RLE 18 per slope zone
 write.csv(rle_sum, file = "outputs/rle_count.csv") 
 
 # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 # make summary extent of RLE categories per biome
 
 rle_ext <- RLE_full_compiled_adjusted %>%
    left_join(veg, by = "T_MAPCODE") %>%
    left_join(results_A2b_B_ROD[,c("T_MAPCODE", "X1750", "X2022")], by="T_MAPCODE") %>%
   filter(T_MAPCODE != "Gd9") %>% 
    group_by(RLE, T_BIOME) %>%
  summarise(ext2022 = round(sum(X2022), 2),.groups = 'drop') %>%
  pivot_wider(names_from = RLE, 
              values_from = ext2022, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
    # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., T_BIOME = "Total", across(where(is.numeric), sum))) %>%
  # Add RLEI
  #mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
  mutate(T_BIOME = factor(T_BIOME, levels = c("Total", "Succulent Karoo", "Savanna", "Nama-Karoo" , "Indian Ocean Coastal Belt", "Grassland", "Fynbos", "Forests","Desert", "Azonal Vegetation", "Albany Thicket" ))) %>% ## ggplot plots inverted factors!
   arrange(T_BIOME)
 
  # export a csv of results - EXTENT (km2) of RLE 24 per BIOME
  write.csv(rle_ext, file = "outputs/rle_ext.csv")
  

```

Make plots

```{r}
# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR") 
library(nbaR)

# Use NBA package to make RLE 2024  plot  of number of types per RLE class per biome
pd_rle_sum <- rle_sum %>%
    rename(`Critically Endangered` = CR, 
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle_barplot_sum <- nba_plot(pd_rle_sum,
                  `T_BIOME`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SAVE = NULL)

rle_barplot_sum

#export the 2024 plot of counts 
ggsave(
  filename = "outputs/rle_barplot_sum.jpeg", # File name
  plot = rle_barplot_sum,                  # Plot object
  device = "jpeg",                        # File format
  width = 16, height = 12, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)


# Use NBA package to make RLE 2024  plot  of remaining extent per RLE class per biome  
pd_rle_ext <- rle_ext%>%
    rename(`Critically Endangered` = CR, 
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle_barplot_ext <- nba_plot(pd_rle_ext,
                  `T_BIOME`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of natural ecosystem extent",
                SAVE = NULL)

rle_barplot_ext

#export the 2024 plot of counts 
ggsave(
  filename = "outputs/rle_barplot_ext.jpeg", # File name
  plot = rle_barplot_ext,                  # Plot object
  device = "jpeg",                        # File format
  width = 16, height = 12, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)
```
