print(ProsSpec)
print(OpunSpec)
print(AcacCycl)
print(AcacSali)
print(PinuSpec)
print(PopuSpec)
print(MeliAzed)
print(HakeSpec)
print(EucaSpec)
print(ChroOdor)
print(LantCama)
print(ArunDona)
print(WattSpec)
reclass_niaps2 <- matrix(c(
0, 1 , 0,
1, 10, 1,
10, 20, 2,
20, 30, 3,
30, 40, 4,
40, 50, 5,
50, 60, 6,
60, 70, 7,
70, 80, 8,
80, 90, 9,
90, 200, 10
), ncol = 3, byrow = TRUE)
# Reclassify the summed invasives data using the matrix
sum_niaps_aea_reclass2 <- classify(sum_niaps_aea_reclass, rcl = reclass_niaps2)
niaps_lc_veg2 <- crosstab(c(lc2022,vegrast,sum_niaps_aea_reclass2), useNA=TRUE) #ensure NA areas included
niaps_lc_veg_values2 <- as_tibble(niaps_lc_veg2) #save raw crosstab outputs
write.csv(niaps_lc_veg_values2, file = "outputs/niaps_lc_veg_values2.csv")
plot(sum_niaps_aea_reclass2)
plot(sum_niaps_aea)
plot(sum_niaps_aea_reclass)
# Reclassify the summed invasives data using the matrix
sum_niaps_aea_reclass2 <- classify(sum_niaps_aea, rcl = reclass_niaps2)
niaps_lc_veg2 <- crosstab(c(lc2022,vegrast,sum_niaps_aea_reclass2), useNA=TRUE) #ensure NA areas included
niaps_lc_veg_values2 <- as_tibble(niaps_lc_veg2) #save raw crosstab outputs
write.csv(niaps_lc_veg_values2, file = "outputs/niaps_lc_veg_values2.csv")
niaps_sum_arc <- rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/niaps_sum_aea_arcgis.tif")
# load niaps summart raster built in ARCGIS
niaps_sum_arc <- rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/niaps_sum_aea_arcgis.tif")
# load niaps summart raster built in ARCGIS
niaps_sum_arc <- rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/niaps_sum_aea_arcgis.tif")
#Crosstabulate invasives, land cover and vegetation data
#Convert raw output values to a tibble
niaps_lc_veg_arc <- crosstab(c(lc2022,vegrast,sum_niaps_arc), useNA=TRUE) #ensure NA areas included
#Crosstabulate invasives, land cover and vegetation data
#Convert raw output values to a tibble
niaps_lc_veg_arc <- crosstab(c(lc2022,vegrast,niaps_sum_arc), useNA=TRUE) #ensure NA areas included
# Resample to match extent of the land cover to allow for crosstabulation
niaps_sum_arc <- resample(niaps_sum_arc, lc2022, method = "near")
plot(niaps_sum_arc)
print(niaps_sum_arc)
reclass_niaps2 <- matrix(c(
0, 1 , 0,
1, 10, 1,
10, 20, 2,
20, 30, 3,
30, 40, 4,
40, 50, 5,
50, 60, 6,
60, 70, 7,
70, 80, 8,
80, 90, 9,
90, 200, 10
), ncol = 3, byrow = TRUE)
View(reclass_niaps2)
# load niaps summart raster built in ARCGIS
niaps_arc <- rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/niaps_arcgis.tif")
# load niaps summart raster built in ARCGIS
niaps_arc <- rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/niaps_arc.tif")
if (identical(ext(lc2022), ext(naips_arc))) {
print("Extents match. Proceed with analysis.")
} else {
print("Extents do not match. Consider resampling or cropping.")
}
if (identical(ext(lc2022), ext(niaps_arc))) {
print("Extents match. Proceed with analysis.")
} else {
print("Extents do not match. Consider resampling or cropping.")
}
# if required resample to match extent of the land cover to allow for crosstabulation
niaps_arc <- resample(niaps_arc, lc2022, method = "near")
if (identical(ext(lc2022), ext(niaps_arc))) {
print("Extents match. Proceed with analysis.")
} else {
print("Extents do not match. Consider resampling or cropping.")
}
print(niaps_arc)
# Reclassify the summed invasives data using the matrix
niaps_arc_rc <- classify(naips_arc, rcl = reclass_niaps2)
# Reclassify the summed invasives data using the matrix
niaps_arc_rc <- classify(niaps_arc, rcl = reclass_niaps2)
plot(niaps_arc_rc)
niaps_lc_veg_arc <- crosstab(c(lc2022,vegrast,niaps_arc_rc), useNA=TRUE) #ensure NA areas included
niaps_lc_veg_arc_values <- as_tibble(niaps_lc_veg_arc) #save raw crosstab outputs
write.csv(niaps_lc_veg_arc_values, file = "outputs/niaps_lc_veg_arc_values.csv")
print(freq(niaps_arc_rc))
print(freq(sum_niaps_aea_reclass2))
#load packages
library(terra)
library(tidyverse)
library(sf)
library(PROJ)
#load packages
library(terra)
library(tidyverse)
library(sf)
library(PROJ)
#Add land cover data  (note all LC products use  WGS84 Albers Equal Area, central meridian = 25; std parallel1 = -24; std parallel2 = -33). Use Tif version as this is processed faster by R terra.
lc2022 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2022_7class.tif")
# Add vegetation data
veg <- vect("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", "NVM2024Final_IEM5_12_07012025")  #ensure it uses proj =  wgs84 aea cm 25 -24 -33
# to help differentiate masked areas (LES and SWA) from NON TERRESTRIAL areas add "NOTVEG" to T_MAPCODE where T_NAME = "Non-Terrestrial*"
veg$T_MAPCODE <- ifelse(veg$T_Name == "Non-terrestrial (estuarine habitat)" | veg$T_Name == "Non-terrestrial (Aquatic)", "NOTVEG", veg$T_MAPCODE)
vegrast <- rasterize(veg,lc2022,"T_MAPCODE")
#load packages
library(terra)
library(tidyverse)
library(sf)
library(PROJ)
#Add land cover data  (note all LC products use  WGS84 Albers Equal Area, central meridian = 25; std parallel1 = -24; std parallel2 = -33). Use Tif version as this is processed faster by R terra.
lc2022 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2022_7class.tif")
# Add vegetation data
veg <- vect("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", "NVM2024Final_IEM5_12_07012025")  #ensure it uses proj =  wgs84 aea cm 25 -24 -33
# to help differentiate masked areas (LES and SWA) from NON TERRESTRIAL areas add "NOTVEG" to T_MAPCODE where T_NAME = "Non-Terrestrial*"
veg$T_MAPCODE <- ifelse(veg$T_Name == "Non-terrestrial (estuarine habitat)" | veg$T_Name == "Non-terrestrial (Aquatic)", "NOTVEG", veg$T_MAPCODE)
vegrast <- rasterize(veg,lc2022,"T_MAPCODE")
niaps_arc <- rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/niaps_arc.tif")
# resample to match extent of the land cover to allow for crosstabulation
niaps_arc <- resample(niaps_arc, lc2022, method = "near")
#load packages
library(terra)
library(tidyverse)
library(sf)
library(PROJ)
#add invasive data : supplied by A. Wannenburg DFFE (public use) epsg 4326 (geographic)
AcacCycl <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/AcacCycl_CombAllplus.tif"))
AcacSali <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/AcacSali_CombAllplus.tif"))
ArunDona <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/ArunDona_CombAllplus.tif"))
ChroOdor <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/ChroOdor_CombAllplus.tif"))
EucaSpec <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/EucaSpec_CombAllplus.tif"))
HakeSpec <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/HakeSpec_CombAllplus.tif"))
LantCama <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/LantCama_CombAllplus.tif"))
MeliAzed <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/MeliAzed_CombAllplus.tif"))
OpunSpec <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/OpunSpec_CombAllplus.tif"))
PinuSpec <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/PinuSpec_CombAllplus.tif"))
PopuSpec <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/PopuSpec_CombAllplus.tif"))
ProsSpec <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/ProsSpec_CombAllplus.tif"))
SolaMaur <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/SolaMaur_CombAllplus.tif"))
WattSpec <- as.numeric(rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/Kotze_National_2024/data/commondata/raster_data/WattSpec_CombAllplus.tif"))
# Sum raster values
niaps_stack <- c(AcacCycl,AcacSali,ArunDona, ChroOdor, EucaSpec, HakeSpec,
LantCama,MeliAzed,OpunSpec,PinuSpec,PopuSpec, ProsSpec,
SolaMaur, WattSpec)
niaps <- sum(niaps_stack)
inv_lc_veg_values <- read_csv("outputs/inv_wc_lc_veg_values.csv", show_col_types = FALSE)
inv_lc_veg_tb <- inv_lc_veg_values %>%
rename(IAT = BioScape_IAT_Map_Certainty_1,
IAT_cert = BioScape_IAT_Map_Certainty_2) %>%
mutate(km2 = (n*100)/1000000) %>% # add extent 10x10m pixels
mutate(IAT = ifelse(IAT == "NaN", 0, IAT))%>% # make NaN = 0 (allows as.integer later)
rename(LC = nlc2022_7class) %>%
filter(n !=0, T_MAPCODE != "NOTVEG") %>%
mutate(LC = as.integer(LC), IAT = as.integer(IAT), IAT_cert = as.integer(IAT_cert)) #IMPORTANT to make integers othewise ifelse does not work correctly below!
options(scipen = 999)
vegrem_extent_in_aoi <- inv_lc_veg_tb %>%
filter(LC == 1 , IAT_cert != 0) %>% # only natural extent in the aoi.
group_by(T_MAPCODE) %>%
summarise(sum_rem = sum(km2))
veg_extent_in_aoi <- inv_lc_veg_tb %>%
filter(IAT_cert != 0) %>% # full extent in aoi
group_by(T_MAPCODE) %>%
summarise(sum_aoi = sum(km2))
inv_veg_sum <- inv_lc_veg_tb %>%
mutate(inv_deg = ifelse(IAT_cert > 6 & !is.na(IAT) & IAT != 0 & LC == 1, 1, 0)) %>% # add IAT not 0
# Experiment with this filter for certainty 50% -80%
group_by(T_MAPCODE, inv_deg) %>%
summarise(sum_IAT = sum(km2)) %>%
filter(inv_deg  == 1, !is.na(T_MAPCODE), T_MAPCODE != "NOTVEG") %>%
inner_join(vegrem_extent_in_aoi, by = "T_MAPCODE") %>%
inner_join(veg_extent_in_aoi, by ="T_MAPCODE")
inv_veg_sum_results <- inv_veg_sum %>%
#inner_join(veg_tb, by = "T_MAPCODE") %>%
mutate(prop_in_aoi = sum_aoi/type_km2) %>%
mutate(prop_inv = sum_IAT/sum_rem) %>%
mutate(prop_nat = sum_rem/sum_aoi) %>%
#relocate(T_Name, .after = T_MAPCODE) %>%
#relocate(T_BIOME, .after = T_Name) %>%
mutate(D3 = case_when(prop_inv >= 0.9 ~ "CR",
prop_inv >= 0.7 ~ "EN",
prop_inv >= 0.5 ~ "VU",
TRUE ~ "LC")) # assuming severity is  > 90% for pure IAT pixels
inv_veg_sum_results <- inv_veg_sum %>%
#inner_join(veg_tb, by = "T_MAPCODE") %>%
#mutate(prop_in_aoi = sum_aoi/type_km2) %>%
mutate(prop_inv = sum_IAT/sum_rem) %>%
mutate(prop_nat = sum_rem/sum_aoi) %>%
#relocate(T_Name, .after = T_MAPCODE) %>%
#relocate(T_BIOME, .after = T_Name) %>%
mutate(D3 = case_when(prop_inv >= 0.9 ~ "CR",
prop_inv >= 0.7 ~ "EN",
prop_inv >= 0.5 ~ "VU",
TRUE ~ "LC")) # assuming severity is  > 90% for pure IAT pixels
View(inv_veg_sum_results)
#  write output to csv for excel use
write.csv(inv_veg_sum_results, file = "outputs/results_df_inv_wc_cert70_D3.csv")
#adjust crs for niaps to match lc2022
niaps_aea <- project(niaps, crs(lc2022), method = "near")
#Add land cover data  (note all LC products use  WGS84 Albers Equal Area, central meridian = 25; std parallel1 = -24; std parallel2 = -33). Use Tif version as this is processed faster by R terra.
lc2022 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2022_7class.tif")
# Add vegetation data
veg <- vect("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", "NVM2024Final_IEM5_12_07012025")  #ensure it uses proj =  wgs84 aea cm 25 -24 -33
# to help differentiate masked areas (LES and SWA) from NON TERRESTRIAL areas add "NOTVEG" to T_MAPCODE where T_NAME = "Non-Terrestrial*"
veg$T_MAPCODE <- ifelse(veg$T_Name == "Non-terrestrial (estuarine habitat)" | veg$T_Name == "Non-terrestrial (Aquatic)", "NOTVEG", veg$T_MAPCODE)
vegrast <- rasterize(veg,lc2022,"T_MAPCODE")
#adjust crs for niaps to match lc2022
niaps_aea <- project(niaps, crs(lc2022), method = "near")
View(niaps)
View(MeliAzed)
View(lc2022)
print(niaps)
writeRaster(niaps, "C:/GIS/TEMP", datatype = "INT1U", gdal = c("COMPRESS=LZW"), overwrite = TRUE)
writeRaster(niaps, "C:/GIS/TEMP", format = "GTiff", datatype = "INT1U", gdal = c("COMPRESS=LZW"), overwrite = TRUE)
writeRaster(niaps, "C:/GIS/TEMP/niaps.tif", format = "GTiff", datatype = "INT1U", gdal = c("COMPRESS=LZW"), overwrite = TRUE)
writeRaster(niaps, "C:/GIS/TEMP/niaps.tif", datatype = "INT1U", gdal = c("COMPRESS=LZW"), overwrite = TRUE)
#adjust crs for niaps to match lc2022
niaps_aea <- project(niaps, crs(lc2022), method = "near")
#
writeRaster(vegrast, "C:/GIS/TEMP/vegrast.tif", datatype = "INT2S", gdal = c("COMPRESS=LZW"), overwrite = TRUE)
#load packages
library(terra)
library(tidyverse)
library(sf)
library(PROJ)
lc2022 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2022_7class.tif")
vegrast <- rast("C:/GIS/TEMP/vegrast.tif")
niaps <- rast("C:/GIS/TEMP/niaps.tif")
#adjust crs for niaps to match lc2022
niaps_aea <- project(niaps, crs(lc2022), method = "near")
#adjust crs for niaps to match lc2022
niaps_aea <- project(niaps, crs(lc2022), method = "near", res = 20)
Sys.setenv(GDAL_CACHEMAX = "2048")  # Increase cache to 512MB (adjust as needed)
#adjust crs for niaps to match lc2022
niaps_aea <- project(niaps, crs(lc2022), method = "near", res = 20)
#adjust crs for niaps to match lc2022
aea <- crs(lc2022)
niaps_aea <- project(niaps, crs=aea, method = "near", res = 20)
niaps_aea <- project(niaps, aea, method = "near", res = 20)
niaps_aea <- project(niaps, aea, method = "near", res = 200)
niaps_aea <- project(niaps, aea, method = "near", filename = "C:/GIS/TEMP/niaps_aea.tif", res = 20)
#load packages
library(terra)
library(tidyverse)
library(sf)
library(PROJ)
lc2022 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2022_7class.tif")
vegrast <- rast("C:/GIS/TEMP/vegrast.tif")
niaps <- rast("C:/GIS/TEMP/niaps.tif")
niaps_aea <- project(niaps, lc2022, method = "near")
reclass_niaps <- matrix(c(
0, 1 , 0,
1, 10, 1,
10, 20, 2,
20, 30, 3,
30, 40, 4,
40, 50, 5,
50, 60, 6,
60, 70, 7,
70, 80, 8,
80, 90, 9,
90, 200, 10
), ncol = 3, byrow = TRUE)
# Reclassify the summed invasives data using the matrix
niaps_aea_rc <- classify(niaps_aea, rcl = reclass_niaps)
View(niaps_aea)
View(lc2022)
#Crosstabulate invasives, land cover and vegetation data
#Convert raw output values to a tibble
niaps_lc_veg <- crosstab(c(lc2022,vegrast,niaps_aea_rc), useNA=TRUE) #ensure NA areas included
niaps_lc_veg_values <- as_tibble(niaps_lc_veg) #save raw crosstab outputs
write.csv(niaps_lc_veg_values, file = "outputs/niaps_lc_veg_values.csv")
niaps_lc_veg_tb <- niaps_lc_veg_values %>%
rename(sum_niaps = Ha) %>%
rename(LC = nlc2022_7class) %>%
mutate(km2 = (n*400)/1000000) %>% # add extent 20x20m pixels
mutate(sum_niaps = ifelse(sum_niaps == "NaN", 0, sum_niaps)) %>% # make NaN = 0 (allows as.integer later)
filter(n !=0, T_MAPCODE != "NOTVEG") %>%
mutate(LC = as.integer(LC), sum_niaps = as.integer(sum_niaps)) #IMPORTANT to make integers othewise ifelse does not work correctly below!
View(niaps_lc_veg_values)
#Rename columns and add km2 (cell size is 20x20m), and make adjustments to values as required
niaps_lc_veg_tb <- niaps_lc_veg_values %>%
rename(sum = Ha) %>%
rename(LC = nlc2022_7class) %>%
mutate(km2 = (n*400)/1000000) %>% # add extent 20x20m pixels
mutate(sum_niaps = ifelse(sum_niaps == "NaN", 0, sum_niaps)) %>% # make NaN = 0 (allows as.integer later)
filter(n !=0, T_MAPCODE != "NOTVEG") %>%
mutate(LC = as.integer(LC), sum_niaps = as.integer(sum_niaps)) #IMPORTANT to make integers othewise ifelse does not work correctly below!
#Rename columns and add km2 (cell size is 20x20m), and make adjustments to values as required
niaps_lc_veg_tb <- niaps_lc_veg_values %>%
rename(sum_niaps = sum) %>%
rename(LC = nlc2022_7class) %>%
mutate(km2 = (n*400)/1000000) %>% # add extent 20x20m pixels
mutate(sum_niaps = ifelse(sum_niaps == "NaN", 0, sum_niaps)) %>% # make NaN = 0 (allows as.integer later)
filter(n !=0, T_MAPCODE != "NOTVEG") %>%
mutate(LC = as.integer(LC), sum_niaps = as.integer(sum_niaps)) #IMPORTANT to make integers othewise ifelse does not work correctly below!
# # write output to csv for excel use
write.csv(niaps_lc_veg_tb, file = "outputs/niaps_lc_veg_tb.csv")
options(scipen = 999) #supress scientific notation
#prepare basic metrics on vegetation types
vegrem_extent_in_sa <- niaps_lc_veg_tb %>% #remaining extent of each type
filter(LC == 1) %>%
group_by(T_MAPCODE) %>%
summarise(sum_rem = sum(km2))
View(niaps_lc_veg_tb)
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE)  %>%
pivot_wider(names_from = sum_niaps,
values_from = km2,
names_prefix = "niaps_ch",
values_fill = list(km2 = 0))
View(niaps_veg_sum3)
#------------------------------
#alt way to summarise()
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = km2,
names_prefix = "niaps_ch",
values_fill = list(km2 = 0))
#------------------------------
#alt way to summarise()
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0))
View(niaps_veg_sum3)
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2))
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0))
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9)
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
mutate(niaps50 = sum(2:11))
#------------------------------
#alt way to summarise()
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
mutate(niaps50 = sum(c(2:11)))
View(niaps_veg_sum3)
#------------------------------
#alt way to summarise()
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
mutate(niaps50 = sum(niaps_ch1:niaps_ch10))
View(niaps_veg_sum3)
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE")
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE") %>%
mutate(niaps50 = sum(niaps_ch1:niaps_ch10)/sum_rem)
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE") %>%
mutate(niaps50 = rowsum(across(niaps_ch1:niaps_ch10))/sum_rem)
#------------------------------
#alt way to summarise()
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
#------------------------------
#alt way to summarise()
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE") %>%
mutate(niaps50 = rowsum(across(c(niaps_ch1:niaps_ch10))/sum_rem))
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE") %>%
mutate(niaps50 = rowSums(across(c(niaps_ch1:niaps_ch10))/sum_rem))
View(niaps_veg_sum3)
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE") %>%
mutate(niaps50 = rowSums(across(c(niaps_ch1:niaps_ch10))/sum_rem)) %>%
mutate(niaps70 = rowSums(across(c(niaps_ch4:niaps_ch10))/sum_rem)) %>%
mutate(niaps90 = rowSums(across(c(niaps_ch6:niaps_ch10))/sum_rem))
niaps_veg_sum3 <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE") %>%
mutate(niaps_ext50 = rowSums(across(c(niaps_ch1:niaps_ch10))/sum_rem)) %>%
mutate(niaps_ext70 = rowSums(across(c(niaps_ch4:niaps_ch10))/sum_rem)) %>%
mutate(niaps_ext90 = rowSums(across(c(niaps_ch6:niaps_ch10))/sum_rem))
#write to a csv for use in RLE analysis
write.csv(niaps_veg_sum, file = "outputs/pressures_data_for_rle_niaps.csv")
niaps_veg_sum <- niaps_lc_veg_tb %>%
filter(LC == 1, sum_niaps !=0) %>% # ensure only natural remnants included
group_by(T_MAPCODE, sum_niaps)  %>%
summarise(niaps_ext = sum( km2)) %>%
pivot_wider(names_from = sum_niaps,
values_from = niaps_ext,
names_prefix = "niaps_ch",
values_fill = list(niaps_ext = 0)) %>%
relocate(niaps_ch10, .after = niaps_ch9) %>%
inner_join(vegrem_extent_in_sa, by = "T_MAPCODE") %>%
mutate(niaps_ext50 = rowSums(across(c(niaps_ch1:niaps_ch10))/sum_rem)) %>%
mutate(niaps_ext70 = rowSums(across(c(niaps_ch4:niaps_ch10))/sum_rem)) %>%
mutate(niaps_ext90 = rowSums(across(c(niaps_ch6:niaps_ch10))/sum_rem)) %>%
mutate(YEAR = 2023)
write.csv(niaps_veg_sum, file = "outputs/pressures_data_for_rle_niaps.csv")
niaps_veg_sum_rle <- niaps_veg_sum %>%
mutate(D3 = case_when(niaps_ext90 >= 0.9 ~ "CR",
niaps_ext90 >= 0.7 | niaps_ext70 >= 0.9 ~ "EN",
niaps_ext90 >= 0.5 | niaps_ext70 >= 0.7 |
niaps_ext50 >= 90 ~ "VU",
TRUE ~ "LC"))
View(niaps_veg_sum_rle)
